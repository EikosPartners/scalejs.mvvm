{"version":3,"sources":["../../src/scalejs.mvvm/selectableArray.js"],"names":[],"mappings":";;;;;kBAe4B,e;;AAZ5B;;;;AACA;;;;;;;;;;;AAII,IAAI,eAAe,mBAAG,YAAtB;IACI,SAAS,mBAAG,KAAH,CAAS,gBADtB;IAEI,aAAa,mBAAG,UAFpB;IAGI,WAAW,mBAAG,QAHlB;IAII,MAAM,kBAAK,MAAL,CAAY,GAJtB;IAKI,QAAQ,kBAAK,KALjB;;AAOe,SAAS,eAAT,CAAyB,KAAzB,EAAgC,IAAhC,EAAsC;;;;;;AAMjD,WAAO,QAAQ,EAAf;;AAEA,QAAI,eAAe,KAAK,YAAL,IAAqB,YAAxC;QACI,kBAAkB,KAAK,eAAL,IAAwB,QAD9C;QAEI,MAFJ;;AAIA,aAAS,sBAAT,CAAgC,IAAhC,EAAsC;;;AAGlC,YAAI,aAAa,KAAK,UAAlB,MAAkC,CAAC,IAAI,KAAK,cAAT,CAAD,IAA6B,KAAK,cAAL,KAAwB,YAAvF,CAAJ,EAA0G;AACtG;AACH;;AAED,YAAI,aAAa,KAAK,UAAlB,CAAJ,EAAmC;AAC/B,kBAAM,IAAI,KAAJ,CAAU,kFACA,KAAK,cADL,GACsB,wDADtB,GAEA,iFAFA,GAGA,iDAHV,CAAN;AAIH;;AAED,YAAI,KAAK,cAAL,CAAoB,YAApB,CAAJ,EAAuC;AACnC,kBAAM,IAAI,KAAJ,CAAU,mFACA,oFADA,GAEA,0BAFV,CAAN;AAGH;;AAED,aAAK,UAAL,GAAkB,YAAlB;;;AAGA,YAAI,IAAI,KAAK,cAAT,KACI,KAAK,cAAL,KAAwB,YAD5B,IAEQ,CAAC,aAAa,KAAK,KAAK,cAAV,CAAb,CAFb,EAEsD;AAClD,kBAAM,IAAI,KAAJ,CAAU,uBAAuB,KAAK,cAA5B,GAA6C,kCAA7C,GACA,iFADA,GAEA,mBAFV,CAAN;AAGH;;AAED,YAAI,IAAI,KAAK,cAAT,CAAJ,EAA8B;AAC1B,iBAAK,UAAL,GAAkB,KAAK,KAAK,cAAV,CAAlB;AACH;;AAED,aAAK,UAAL,CAAgB,SAAhB,CAA0B,UAAU,QAAV,EAAoB;AAC1C,gBAAI,QAAJ,EAAc;AACV,6BAAa,IAAb;AACH,aAFD,MAEO;AACH,oBAAI,mBAAmB,IAAvB,EAA6B;AACzB,iCAAa,SAAb;AACH;AACJ;AACJ,SARD;AASH;;;AAGD,QAAI,aAAa,KAAb,CAAJ,EAAyB;AACrB,iBAAS,SAAS,YAAY;AAC1B,gBAAI,YAAY,OAAO,KAAP,CAAhB;AACA,sBAAU,OAAV,CAAkB,sBAAlB;AACA,mBAAO,MAAM,IAAN,CAAW,SAAX,CAAP;AACH,SAJQ,CAAT;AAKH,KAND,MAMO;AACH,cAAM,OAAN,CAAc,sBAAd;AACA,iBAAS,MAAM,IAAN,CAAW,KAAX,CAAT;AACH;;AAED,iBAAa,SAAb,CAAuB,UAAU,OAAV,EAAmB;AACtC,eAAO,MAAP,EAAe,OAAf,CAAuB,UAAU,IAAV,EAAgB;AACnC,iBAAK,UAAL,CAAgB,SAAS,OAAzB;AACH,SAFD;;AAIA,YAAI,oBAAoB,UAApB,IAAkC,OAAtC,EAA+C;AAC3C,uBAAW,YAAY;AAAE,6BAAa,SAAb;AAA0B,aAAnD,EAAqD,CAArD;AACH;AACJ,KARD;;AAUA,WAAO,YAAP,GAAsB,YAAtB;;AAEA,WAAO,MAAP;AACH","file":"selectableArray.js","sourcesContent":["/*global define,document,setTimeout*/\r\n/*jslint nomen: true*/\r\n/// <reference path=\"../Scripts/knockout-2.2.1.debug.js\" />\r\nimport ko from 'knockout';\r\nimport core from 'scalejs.core';\r\n    /// <param name=\"ko\" value=\"window.ko\"/>\r\n    \r\n\r\n    var isObservable = ko.isObservable,\r\n        unwrap = ko.utils.unwrapObservable,\r\n        observable = ko.observable,\r\n        computed = ko.computed,\r\n        has = core.object.has,\r\n        array = core.array;\r\n\r\n    export default function selectableArray(items, opts) {\r\n        /*selectable(items, {\r\n            selectedItem: selectedTile,\r\n            selectionPolicy: 'single',\r\n            isSelectedPath: 'isSelected'\r\n        });*/\r\n        opts = opts || {};\r\n\r\n        var selectedItem = opts.selectedItem || observable(),\r\n            selectionPolicy = opts.selectionPolicy || 'single',\r\n            result;\r\n\r\n        function ensureIsSelectedExists(item) {\r\n            // if item has isSelected property which is observable and selectedPath is not set\r\n            // then nothing to do\r\n            if (isObservable(item.isSelected) && (!has(opts.isSelectedPath) || opts.isSelectedPath === 'isSelected')) {\r\n                return;\r\n            }\r\n\r\n            if (isObservable(item.isSelected)) {\r\n                throw new Error('item has observable `isSelected` property but `isSelectedPath` specified as \"' +\r\n                                opts.isSelectedPath + '\". `selectable` uses `isSelected` property of an item ' +\r\n                                'to determine whether it\\'s selected. Either don\\'t specify `isSelectedPath` or ' +\r\n                                'rename `isSelected` property to something else.');\r\n            }\r\n\r\n            if (item.hasOwnProperty('isSelected')) {\r\n                throw new Error('item has non-observable `isSelected` property. `selectable` uses `isSelected` ' +\r\n                                'property of an item to determine whether it\\'s selected. Either make `isSelected` ' +\r\n                                'observable or rename it.');\r\n            }\r\n\r\n            item.isSelected = observable();\r\n\r\n            // subscribe isSelectedPath property to isSelected\r\n            if (has(opts.isSelectedPath) &&\r\n                    opts.isSelectedPath !== 'isSelected' &&\r\n                        !isObservable(item[opts.isSelectedPath])) {\r\n                throw new Error('item\\'s property \"' + opts.isSelectedPath + '\" specified by `isSelectedPath` ' +\r\n                                ' isn\\'t observable. Either make it observable or specify different property in ' +\r\n                                ' `isSelectedPath`');\r\n            }\r\n\r\n            if (has(opts.isSelectedPath)) {\r\n                item.isSelected = item[opts.isSelectedPath];\r\n            }\r\n\r\n            item.isSelected.subscribe(function (newValue) {\r\n                if (newValue) {\r\n                    selectedItem(item);\r\n                } else {\r\n                    if (selectedItem() === item) {\r\n                        selectedItem(undefined);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // subscribe to isSelected property of every item if isSelectedPath is specified\r\n        if (isObservable(items)) {\r\n            result = computed(function () {\r\n                var unwrapped = unwrap(items);\r\n                unwrapped.forEach(ensureIsSelectedExists);\r\n                return array.copy(unwrapped);\r\n            });\r\n        } else {\r\n            items.forEach(ensureIsSelectedExists);\r\n            result = array.copy(items);\r\n        }\r\n\r\n        selectedItem.subscribe(function (newItem) {\r\n            unwrap(result).forEach(function (item) {\r\n                item.isSelected(item === newItem);\r\n            });\r\n\r\n            if (selectionPolicy === 'deselect' && newItem) {\r\n                setTimeout(function () { selectedItem(undefined); }, 0);\r\n            }\r\n        });\r\n\r\n        result.selectedItem = selectedItem;\r\n\r\n        return result;\r\n    };\r\n\r\n"]}