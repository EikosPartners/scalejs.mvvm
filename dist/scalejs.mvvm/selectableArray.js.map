{"version":3,"sources":["../../src/scalejs.mvvm/selectableArray.js"],"names":["selectableArray","isObservable","unwrap","utils","unwrapObservable","observable","computed","has","object","array","items","opts","selectedItem","selectionPolicy","result","ensureIsSelectedExists","item","isSelected","isSelectedPath","Error","hasOwnProperty","subscribe","newValue","undefined","unwrapped","forEach","copy","newItem","setTimeout"],"mappings":";;;;;kBAe4BA,e;;AAZ5B;;;;AACA;;;;;;AACI;;;AALJ;AACA;AACA;AAMI,IAAIC,eAAe,mBAAGA,YAAtB;AAAA,IACIC,SAAS,mBAAGC,KAAH,CAASC,gBADtB;AAAA,IAEIC,aAAa,mBAAGA,UAFpB;AAAA,IAGIC,WAAW,mBAAGA,QAHlB;AAAA,IAIIC,MAAM,kBAAKC,MAAL,CAAYD,GAJtB;AAAA,IAKIE,QAAQ,kBAAKA,KALjB;;AAOe,SAAST,eAAT,CAAyBU,KAAzB,EAAgCC,IAAhC,EAAsC;AACjD;;;;;AAKAA,WAAOA,QAAQ,EAAf;;AAEA,QAAIC,eAAeD,KAAKC,YAAL,IAAqBP,YAAxC;AAAA,QACIQ,kBAAkBF,KAAKE,eAAL,IAAwB,QAD9C;AAAA,QAEIC,MAFJ;;AAIA,aAASC,sBAAT,CAAgCC,IAAhC,EAAsC;AAClC;AACA;AACA,YAAIf,aAAae,KAAKC,UAAlB,MAAkC,CAACV,IAAII,KAAKO,cAAT,CAAD,IAA6BP,KAAKO,cAAL,KAAwB,YAAvF,CAAJ,EAA0G;AACtG;AACH;;AAED,YAAIjB,aAAae,KAAKC,UAAlB,CAAJ,EAAmC;AAC/B,kBAAM,IAAIE,KAAJ,CAAU,kFACAR,KAAKO,cADL,GACsB,wDADtB,GAEA,iFAFA,GAGA,iDAHV,CAAN;AAIH;;AAED,YAAIF,KAAKI,cAAL,CAAoB,YAApB,CAAJ,EAAuC;AACnC,kBAAM,IAAID,KAAJ,CAAU,mFACA,oFADA,GAEA,0BAFV,CAAN;AAGH;;AAEDH,aAAKC,UAAL,GAAkBZ,YAAlB;;AAEA;AACA,YAAIE,IAAII,KAAKO,cAAT,KACIP,KAAKO,cAAL,KAAwB,YAD5B,IAEQ,CAACjB,aAAae,KAAKL,KAAKO,cAAV,CAAb,CAFb,EAEsD;AAClD,kBAAM,IAAIC,KAAJ,CAAU,uBAAuBR,KAAKO,cAA5B,GAA6C,kCAA7C,GACA,iFADA,GAEA,mBAFV,CAAN;AAGH;;AAED,YAAIX,IAAII,KAAKO,cAAT,CAAJ,EAA8B;AAC1BF,iBAAKC,UAAL,GAAkBD,KAAKL,KAAKO,cAAV,CAAlB;AACH;;AAEDF,aAAKC,UAAL,CAAgBI,SAAhB,CAA0B,UAAUC,QAAV,EAAoB;AAC1C,gBAAIA,QAAJ,EAAc;AACVV,6BAAaI,IAAb;AACH,aAFD,MAEO;AACH,oBAAIJ,mBAAmBI,IAAvB,EAA6B;AACzBJ,iCAAaW,SAAb;AACH;AACJ;AACJ,SARD;AASH;;AAED;AACA,QAAItB,aAAaS,KAAb,CAAJ,EAAyB;AACrBI,iBAASR,SAAS,YAAY;AAC1B,gBAAIkB,YAAYtB,OAAOQ,KAAP,CAAhB;AACAc,sBAAUC,OAAV,CAAkBV,sBAAlB;AACA,mBAAON,MAAMiB,IAAN,CAAWF,SAAX,CAAP;AACH,SAJQ,CAAT;AAKH,KAND,MAMO;AACHd,cAAMe,OAAN,CAAcV,sBAAd;AACAD,iBAASL,MAAMiB,IAAN,CAAWhB,KAAX,CAAT;AACH;;AAEDE,iBAAaS,SAAb,CAAuB,UAAUM,OAAV,EAAmB;AACtCzB,eAAOY,MAAP,EAAeW,OAAf,CAAuB,UAAUT,IAAV,EAAgB;AACnCA,iBAAKC,UAAL,CAAgBD,SAASW,OAAzB;AACH,SAFD;;AAIA,YAAId,oBAAoB,UAApB,IAAkCc,OAAtC,EAA+C;AAC3CC,uBAAW,YAAY;AAAEhB,6BAAaW,SAAb;AAA0B,aAAnD,EAAqD,CAArD;AACH;AACJ,KARD;;AAUAT,WAAOF,YAAP,GAAsBA,YAAtB;;AAEA,WAAOE,MAAP;AACH","file":"selectableArray.js","sourcesContent":["/*global define,document,setTimeout*/\r\n/*jslint nomen: true*/\r\n/// <reference path=\"../Scripts/knockout-2.2.1.debug.js\" />\r\nimport ko from 'knockout';\r\nimport core from 'scalejs.core';\r\n    /// <param name=\"ko\" value=\"window.ko\"/>\r\n    \r\n\r\n    var isObservable = ko.isObservable,\r\n        unwrap = ko.utils.unwrapObservable,\r\n        observable = ko.observable,\r\n        computed = ko.computed,\r\n        has = core.object.has,\r\n        array = core.array;\r\n\r\n    export default function selectableArray(items, opts) {\r\n        /*selectable(items, {\r\n            selectedItem: selectedTile,\r\n            selectionPolicy: 'single',\r\n            isSelectedPath: 'isSelected'\r\n        });*/\r\n        opts = opts || {};\r\n\r\n        var selectedItem = opts.selectedItem || observable(),\r\n            selectionPolicy = opts.selectionPolicy || 'single',\r\n            result;\r\n\r\n        function ensureIsSelectedExists(item) {\r\n            // if item has isSelected property which is observable and selectedPath is not set\r\n            // then nothing to do\r\n            if (isObservable(item.isSelected) && (!has(opts.isSelectedPath) || opts.isSelectedPath === 'isSelected')) {\r\n                return;\r\n            }\r\n\r\n            if (isObservable(item.isSelected)) {\r\n                throw new Error('item has observable `isSelected` property but `isSelectedPath` specified as \"' +\r\n                                opts.isSelectedPath + '\". `selectable` uses `isSelected` property of an item ' +\r\n                                'to determine whether it\\'s selected. Either don\\'t specify `isSelectedPath` or ' +\r\n                                'rename `isSelected` property to something else.');\r\n            }\r\n\r\n            if (item.hasOwnProperty('isSelected')) {\r\n                throw new Error('item has non-observable `isSelected` property. `selectable` uses `isSelected` ' +\r\n                                'property of an item to determine whether it\\'s selected. Either make `isSelected` ' +\r\n                                'observable or rename it.');\r\n            }\r\n\r\n            item.isSelected = observable();\r\n\r\n            // subscribe isSelectedPath property to isSelected\r\n            if (has(opts.isSelectedPath) &&\r\n                    opts.isSelectedPath !== 'isSelected' &&\r\n                        !isObservable(item[opts.isSelectedPath])) {\r\n                throw new Error('item\\'s property \"' + opts.isSelectedPath + '\" specified by `isSelectedPath` ' +\r\n                                ' isn\\'t observable. Either make it observable or specify different property in ' +\r\n                                ' `isSelectedPath`');\r\n            }\r\n\r\n            if (has(opts.isSelectedPath)) {\r\n                item.isSelected = item[opts.isSelectedPath];\r\n            }\r\n\r\n            item.isSelected.subscribe(function (newValue) {\r\n                if (newValue) {\r\n                    selectedItem(item);\r\n                } else {\r\n                    if (selectedItem() === item) {\r\n                        selectedItem(undefined);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // subscribe to isSelected property of every item if isSelectedPath is specified\r\n        if (isObservable(items)) {\r\n            result = computed(function () {\r\n                var unwrapped = unwrap(items);\r\n                unwrapped.forEach(ensureIsSelectedExists);\r\n                return array.copy(unwrapped);\r\n            });\r\n        } else {\r\n            items.forEach(ensureIsSelectedExists);\r\n            result = array.copy(items);\r\n        }\r\n\r\n        selectedItem.subscribe(function (newItem) {\r\n            unwrap(result).forEach(function (item) {\r\n                item.isSelected(item === newItem);\r\n            });\r\n\r\n            if (selectionPolicy === 'deselect' && newItem) {\r\n                setTimeout(function () { selectedItem(undefined); }, 0);\r\n            }\r\n        });\r\n\r\n        result.selectedItem = selectedItem;\r\n\r\n        return result;\r\n    };\r\n\r\n"]}