{"version":3,"sources":["../../src/scalejs.mvvm/htmlTemplateSource.js"],"names":["toArray","array","has","object","templateEngine","nativeTemplateEngine","templates","data","registerTemplates","templatesHtml","div","document","createElement","WinJS","Utilities","setInnerHTMLUnsafe","innerHTML","childNodes","forEach","childNode","nodeType","id","getRegisteredTemplates","makeTemplateSource","template","Element","nodes","templateSources","domElement","prototype","bind","key","value","arguments","length","text","Error","setTemplateEngine"],"mappings":";;;;;;AACA;;;;AACA;;;;;;AAFA;AAKI,IAAIA,UAAU,kBAAKC,KAAL,CAAWD,OAAzB;AAAA,IACIE,MAAM,kBAAKC,MAAL,CAAYD,GADtB;AAAA,IAEIE,iBAAiB,IAAI,mBAAGC,oBAAP,EAFrB;AAAA,IAGIC,YAAY;AACRC,UAAM;AADE,CAHhB;;AAOA,SAASC,iBAAT,CAA6BC,aAA7B,EAA6C;AACzC;AACA;AACA;AACA,QAAIC,MAAMC,SAASC,aAAT,CAAuB,KAAvB,CAAV;;AAEA,QAAI,OAAOC,KAAP,KAAiB,WAArB,EAAkC;AAC9BA,cAAMC,SAAN,CAAgBC,kBAAhB,CAAmCL,GAAnC,EAAwCD,aAAxC;AACH,KAFD,MAEO;AACHC,YAAIM,SAAJ,GAAgBP,aAAhB;AACH;;AAEDT,YAAQU,IAAIO,UAAZ,EAAwBC,OAAxB,CAAgC,UAAWC,SAAX,EAAuB;AACnD,YAAIA,UAAUC,QAAV,KAAuB,CAAvB,IAA4BlB,IAAIiB,SAAJ,EAAe,IAAf,CAAhC,EAAsD;AAClDb,sBAAUa,UAAUE,EAApB,IAA0BF,UAAUH,SAApC;AACH;AACJ,KAJD;AAKH;;AAED,SAASM,sBAAT,GAAmC;AAC/B,WAAOhB,SAAP;AACH;;AAED,SAASiB,kBAAT,CAA8BC,QAA9B,EAAyC;;AAErC,QAAKA,oBAAoBC,OAAzB,EAAmC;AAC/B,eAAO;AACHC,mBAAO,mBAAGC,eAAH,CAAmBC,UAAnB,CAA8BC,SAA9B,CACFH,KADE,CACII,IADJ,CACS,EAAEF,YAAYJ,QAAd,EADT;AADJ,SAAP;AAIH;;AAED,WAAO;AACHjB,cAAM,cAAWwB,GAAX,EAAgBC,KAAhB,EAAwB;AAC1B,gBAAI,CAAC9B,IAAII,UAAUC,IAAd,EAAoBiB,QAApB,CAAL,EAAoC;AAChClB,0BAAUC,IAAV,CAAeiB,QAAf,IAA2B,EAA3B;AACH;;AAED;AACA,gBAAIS,UAAUC,MAAV,KAAqB,CAAzB,EAA4B;AACxB,uBAAO5B,UAAUC,IAAV,CAAeiB,QAAf,EAAyBO,GAAzB,CAAP;AACH;;AAED;AACAzB,sBAAUC,IAAV,CAAeiB,QAAf,EAAyBO,GAAzB,IAAgCC,KAAhC;AACH,SAbE;AAcHG,cAAM,cAAWH,KAAX,EAAmB;AACrB;AACA;AACA,gBAAIC,UAAUC,MAAV,KAAqB,CAAzB,EAA4B;AACxB,uBAAO5B,UAAUkB,QAAV,CAAP;AACH;;AAED,kBAAM,IAAIY,KAAJ,CAAU,sCACAZ,QADA,GACW,kBADX,GACgCQ,KADhC,GACwC,IADxC,GAEA,uCAFV,CAAN;AAGH;AAxBE,KAAP;AA0BH;;AAED5B,eAAemB,kBAAf,GAAoCA,kBAApC;;AAEA,mBAAGc,iBAAH,CAAqBjC,cAArB;;kBAEe;AACXI,uBAAmBA,iBADR;AAEXc,4BAAyBA;AAFd,C","file":"htmlTemplateSource.js","sourcesContent":["/*global define,document,WinJS*/\r\nimport ko from 'knockout';\r\nimport core from 'scalejs.core';\r\n    \r\n\r\n    var toArray = core.array.toArray,\r\n        has = core.object.has,\r\n        templateEngine = new ko.nativeTemplateEngine(),\r\n        templates = {\r\n            data: { }\r\n        };\r\n\r\n    function registerTemplates ( templatesHtml ) {\r\n        // iterate through all templates (e.g. children of root in templatesHtml)\r\n        // for every child get its templateId and templateHtml\r\n        // and add it to 'templates'\r\n        var div = document.createElement('div');\r\n\r\n        if (typeof WinJS !== 'undefined') {\r\n            WinJS.Utilities.setInnerHTMLUnsafe(div, templatesHtml);\r\n        } else {\r\n            div.innerHTML = templatesHtml;\r\n        }\r\n\r\n        toArray(div.childNodes).forEach(function ( childNode ) {\r\n            if (childNode.nodeType === 1 && has(childNode, 'id')) {\r\n                templates[childNode.id] = childNode.innerHTML;\r\n            }\r\n        });\r\n    }\r\n\r\n    function getRegisteredTemplates () {\r\n        return templates;\r\n    }\r\n\r\n    function makeTemplateSource ( template ) {\r\n\r\n        if ( template instanceof Element ) {\r\n            return {\r\n                nodes: ko.templateSources.domElement.prototype\r\n                    .nodes.bind({ domElement: template })\r\n            };\r\n        }\r\n\r\n        return {\r\n            data: function ( key, value ) {\r\n                if (!has(templates.data, template)) {\r\n                    templates.data[template] = { };\r\n                }\r\n\r\n                // if called with only key then return the associated value\r\n                if (arguments.length === 1) {\r\n                    return templates.data[template][key];\r\n                }\r\n\r\n                // if called with key and value then store the value\r\n                templates.data[template][key] = value;\r\n            },\r\n            text: function ( value ) {\r\n                // if no value return the template content\r\n                // since that's what KO wants\r\n                if (arguments.length === 0) {\r\n                    return templates[template];\r\n                }\r\n\r\n                throw new Error('An attempt to override template \"' +\r\n                                template + '\" with content \"' + value + '\" ' +\r\n                                'Template overriding is not supported.');\r\n            }\r\n        };\r\n    }\r\n\r\n    templateEngine.makeTemplateSource = makeTemplateSource;\r\n\r\n    ko.setTemplateEngine(templateEngine);\r\n\r\n    export default {\r\n        registerTemplates: registerTemplates,\r\n        getRegisteredTemplates : getRegisteredTemplates\r\n    };\r\n\r\n"]}