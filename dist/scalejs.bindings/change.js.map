{"version":3,"sources":["../../src/scalejs.bindings/change.js"],"names":[],"mappings":";;;;;;AACA;;;;AACA;;;;;;;;;AAGI,IAAI,KAAK,kBAAK,IAAL,CAAU,EAAnB;IACI,MAAM,kBAAK,MAAL,CAAY,GADtB;;;AAIA,SAAS,IAAT,CAAc,OAAd,EAAuB,aAAvB,EAAsC,mBAAtC,EAA2D,SAA3D,EAAsE;AAClE,QAAI,CAAC,IAAI,SAAJ,CAAL,EAAqB;AACjB;AACH;;AAED,QAAI,SAAS,mBAAG,KAAH,CAAS,gBAAtB;QACI,QAAQ,eADZ;QAEI,aAAa,OAAO,KAAP,CAFjB;QAGI,QAHJ;QAII,OAJJ;;;AAMI,iBANJ;;AAQA,aAAS,yBAAT,CAAmC,CAAnC,EAAsC,YAAtC,EAAoD;AAChD,eAAO,UAAU,QAAV,EAAoB;AACvB,gBAAI,aAAa,YAAjB,EAA+B;AAC3B,+BAAe,QAAf;AACA,kBAAE,IAAF,CAAO,SAAP,EAAkB,QAAlB,EAA4B,OAA5B;AACH;AACJ,SALD;AAMH;;AAED,aAAS,sBAAT,CAAgC,QAAhC,EAA0C,aAA1C,EAAyD;AACrD,2BAAG,QAAH,CAAY;AACR,kBAAM,gBAAY;AACd,oBAAI,MAAM,OAAO,UAAU,QAAV,CAAP,CAAV;AACA,8BAAc,GAAd;AACH,aAJO;AAKR,sCAA0B;AALlB,SAAZ;AAOH;;AAED,SAAK,QAAL,IAAiB,UAAjB,EAA6B;AACzB,YAAI,WAAW,cAAX,CAA0B,QAA1B,CAAJ,EAAyC;AACrC,sBAAU,WAAW,QAAX,CAAV;AACA,gBAAI,GAAG,QAAQ,OAAX,EAAoB,UAApB,CAAJ,EAAqC;AACjC,wBAAQ,OAAR,CAAgB,KAAhB,CAAsB,SAAtB,EAAiC,CAAC,OAAO,UAAU,QAAV,CAAP,CAAD,EAA8B,OAA9B,CAAjC;AACH;AACD,gBAAI,GAAG,QAAQ,MAAX,EAAmB,UAAnB,CAAJ,EAAoC;AAChC,gCAAgB,0BAA0B,QAAQ,MAAlC,EAA0C,OAAO,UAAU,QAAV,CAAP,CAA1C,CAAhB;AACH;AACD,gBAAI,GAAG,OAAH,EAAY,UAAZ,CAAJ,EAA6B;AACzB,gCAAgB,0BAA0B,OAA1B,EAAmC,OAAO,UAAU,QAAV,CAAP,CAAnC,CAAhB;AACH;AACD,gBAAI,aAAJ,EAAmB;AACf,uCAAuB,QAAvB,EAAiC,aAAjC;AACH;AACJ;AACJ;AACJ;;;kBAGc;AACX,UAAM;AADK,C","file":"change.js","sourcesContent":["/*global define*/\r\nimport ko from 'knockout';\r\nimport core from 'scalejs.core';\r\n    \r\n\r\n    var is = core.type.is,\r\n        has = core.object.has;\r\n\r\n    /*jslint unparam: true*/\r\n    function init(element, valueAccessor, allBindingsAccessor, viewModel) {\r\n        if (!has(viewModel)) {\r\n            return;\r\n        }\r\n\r\n        var unwrap = ko.utils.unwrapObservable,\r\n            value = valueAccessor(),\r\n            properties = unwrap(value),\r\n            property,\r\n            handler,\r\n            //currentValue,\r\n            changeHandler;\r\n\r\n        function bindPropertyChangeHandler(h, currentValue) {\r\n            return function (newValue) {\r\n                if (newValue !== currentValue) {\r\n                    currentValue = newValue;\r\n                    h.call(viewModel, newValue, element);\r\n                }\r\n            };\r\n        }\r\n\r\n        function subscribeChangeHandler(property, changeHandler) {\r\n            ko.computed({\r\n                read: function () {\r\n                    var val = unwrap(viewModel[property]);\r\n                    changeHandler(val);\r\n                },\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n        }\r\n\r\n        for (property in properties) {\r\n            if (properties.hasOwnProperty(property)) {\r\n                handler = properties[property];\r\n                if (is(handler.initial, 'function')) {\r\n                    handler.initial.apply(viewModel, [unwrap(viewModel[property]), element]);\r\n                }\r\n                if (is(handler.update, 'function')) {\r\n                    changeHandler = bindPropertyChangeHandler(handler.update, unwrap(viewModel[property]));\r\n                }\r\n                if (is(handler, 'function')) {\r\n                    changeHandler = bindPropertyChangeHandler(handler, unwrap(viewModel[property]));\r\n                }\r\n                if (changeHandler) {\r\n                    subscribeChangeHandler(property, changeHandler);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*jslint unparam: false*/\r\n\r\n    export default {\r\n        init: init\r\n    };\r\n\r\n"]}